import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import styled from "./Offersoffer.module.css";
import SpinnerAnimation from "../Animations/SpinnerAnimation.jsx";
import NotFoundAnimation from "../Animations/NotFoundAnimation.jsx";
import OfferModal from "../modal/OfferModal.jsx";
import "./trnding.css";

const TrendingOffers = () => {
    const [trendingoffers, setTrendingoffers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedOffer, setSelectedOffer] = useState(null);

    // API details
    const api_key = "6wfvXNHicQEn9Z30of3IOg1n5ppblxDj";
    const pub_id = "vRzPiG";
    const app_id = "XO8QDH0Jqm";
    const user_id = "1"; // Replace with actual user_id

    useEffect(() => {
        const fetchOffers = async () => {
            try {
                const response = await axios.get(
                    `https://notik.me/api/v2/get-top-converting-offers`,
                    {
                        params: {
                            api_key,
                            pub_id,
                            app_id,
                            user_id,
                        },
                    }
                );
                setTrendingoffers(response.data.offers.data || []);
                setLoading(false);
            } catch (err) {
                console.error(err);
                setError("Failed to fetch trending offers");
                setLoading(false);
            }
        };
        fetchOffers();
    }, []);

    const openModal = useCallback((offer) => {
        setSelectedOffer(offer);
        setIsModalOpen(true);
        document.body.style.overflow = "hidden";
    }, []);

    const closeModal = useCallback(() => {
        setIsModalOpen(false);
        setSelectedOffer(null);
        document.body.style.overflow = "auto";
    }, []);

    const sliderSettings = {
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 9,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        arrows: true,
    };

    return (
        <div className="trending-offers">
            {loading ? (
                <div className="loading-spinner text-center">
                    <SpinnerAnimation />
                    <h4 className="text-center">Loading Offers...</h4>
                </div>
            ) : error ? (
                <div className="offer-not-found-tranding">
                    <NotFoundAnimation />
                    <h4 className="fw-bold rounded">No Tranding offers available at the moment</h4>
                </div>
            ) : (
                <Slider {...sliderSettings} className={styled.slider}>
                    {trendingoffers.map((offer, index) => (
                        <div
                            key={index}
                            className={`${styled.offer_box} cursor-pointer`}
                            onClick={() => openModal(offer)}
                        >
                            <div className={styled.offer_img}>
                                <img
                                    src={offer.image_url}
                                    alt={offer.title || "Offer Image"}
                                />
                            </div>
                            <div className={`${styled.offer_title} text-center`}>
                                <h5 className="offer_name">
                                    {typeof offer.name === "string"
                                        ? offer.name.length > 15
                                            ? `${offer.name.slice(0, 15)}...`
                                            : offer.name
                                        : "No title available"}
                                </h5>
                                <h5 className="offer_country">
                                    Country: {typeof offer.country_code === "string" ? offer.country_code : "N/A"}
                                </h5>
                                <h5 className="offer_device">
                                    Device: {Array.isArray(offer.devices) ? offer.devices.join(", ") : "N/A"}
                                </h5>
                                <h4 className={`${styled.offer_payout} green`}>
                                    Payout: ${typeof offer.payout === "number" ? offer.payout : "N/A"}
                                </h4>
                            </div>
                        </div>
                    ))}
                </Slider>

            )}

            {isModalOpen && (
                <OfferModal
                    isModalOpen={isModalOpen}
                    selectedOffer={selectedOffer}
                    closeModal={closeModal}
                />
            )}
        </div>
    );
};

export default TrendingOffers;
