import React, { useState, useEffect, useCallback, memo } from "react";
import PropTypes from "prop-types";
import Slider from "react-slick";
import OfferModal from "../modal/OfferModal.jsx";
import SpinnerAnimation from "../Animations/SpinnerAnimation.jsx";
import NotFoundAnimation from "../Animations/NotFoundAnimation.jsx";
import zedStore from "../zedstore/ZedStore.jsx";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import styled from "./Offersoffer.module.css";
import "./slider-css.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCoins, faFire } from "@fortawesome/free-solid-svg-icons";
import axios from "axios";

const CACHE_KEY = 'topConvertingOffersCache';
const CACHE_EXPIRY = 60 * 60 * 1000; // 1 hour cache

const TopConvertingOffer = memo(() => {
    const API_KEY = "6wfvXNHicQEn9Z30of3IOg1n5ppblxDj";
    const PUB_ID = "vRzPiG";
    const APP_ID = "XO8QDH0Jqm";

    const toggleLoginPopup = zedStore((state) => state.toggleLoginPopup);
    const userDetails = zedStore((state) => state.userDetails);

    const [offers, setOffers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedOffer, setSelectedOffer] = useState(null);
    const [lastUpdated, setLastUpdated] = useState('');

    const fetchTopConvertingOffers = useCallback(async () => {
        const cachedData = localStorage.getItem(CACHE_KEY);
        const now = new Date().getTime();

        if (cachedData) {
            const { data, timestamp } = JSON.parse(cachedData);
            if (now - timestamp < CACHE_EXPIRY) {
                setOffers(data);
                setLastUpdated(new Date(timestamp).toLocaleTimeString());
                setLoading(false);
                return;
            }
        }

        try {
            setLoading(true);
            const response = await axios.get(
                `https://notik.me/api/v2/get-top-converting-offers?api_key=${API_KEY}&pub_id=${PUB_ID}&app_id=${APP_ID}`
            );

            const offersData = response.data.offers.data || [];
            const timestamp = now;

            localStorage.setItem(CACHE_KEY, JSON.stringify({
                data: offersData,
                timestamp
            }));

            setOffers(offersData);
            setLastUpdated(new Date(timestamp).toLocaleTimeString());
            setError(null);
        } catch (err) {
            if (cachedData) {
                const { data, timestamp } = JSON.parse(cachedData);
                setOffers(data);
                setLastUpdated(new Date(timestamp).toLocaleTimeString());
                setError("Using cached data. New data unavailable.");
            } else {
                setError(err.response?.data?.message ||
                    "Too many requests. Please try again later.");
            }
        } finally {
            setLoading(false);
        }
    }, []);

    const openModal = useCallback((offer) => {
        setSelectedOffer(offer);
        setIsModalOpen(true);
        document.body.style.overflow = "hidden";
    }, []);

    const closeModal = useCallback(() => {
        setIsModalOpen(false);
        setSelectedOffer(null);
        document.body.style.overflow = "auto";
    }, []);

    // Slider settings - shows max 3 offers at a time
    const sliderSettings = {
        dots: false,
        infinite: true,
        autoplay: true,
        speed: 500,
        slidesToShow: Math.min(3, offers.length),
        slidesToScroll: 1,
        responsive: [
            {
                breakpoint: 1024,
                settings: {
                    slidesToShow: Math.min(3, offers.length),
                    slidesToScroll: 1,
                },
            },
            {
                breakpoint: 768,
                settings: {
                    slidesToShow: Math.min(2, offers.length),
                    slidesToScroll: 1,
                },
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                },
            },
        ],
    };

    useEffect(() => {
        fetchTopConvertingOffers();
    }, [fetchTopConvertingOffers]);

    return (
        <div className="offers-slider mb-5">
            <div className={`${styled.offers_body} ${styled.top_converting}`}>
                <div className="card-body">
                    <div className="section-title mb-4">
                        <h4>
                            <FontAwesomeIcon icon={faFire} className="text-danger me-2" />
                            Top Converting Offers
                            {lastUpdated && (
                                <small className="text-muted ms-2">(Updated: {lastUpdated})</small>
                            )}
                        </h4>
                    </div>
                    {loading ? (
                        <div className="loading-spinner text-center">
                            <SpinnerAnimation />
                            <h4 className="text-center mt-3">Loading Top Offers...</h4>
                        </div>
                    ) : error ? (
                        <div className="text-center w-100 loading-spinner offer-not-found">
                            <NotFoundAnimation />
                            <h4 className="fw-bold rounded">{error}</h4>
                        </div>
                    ) : offers.length > 0 ? (
                        <Slider {...sliderSettings}>
                            {offers.map((offer, index) => (
                                <div
                                    key={index}
                                    className={`${styled.offer_box} cursor-pointer`}
                                    role="button"
                                    tabIndex={0}
                                    aria-label={`View details of ${offer.name || "offer"}`}
                                    onClick={userDetails ? () => openModal(offer) : () => toggleLoginPopup(true)}
                                    onKeyPress={(e) => {
                                        if (e.key === "Enter" || e.key === " ") {
                                            userDetails ? openModal(offer) : toggleLoginPopup(true);
                                        }
                                    }}
                                >
                                    <div className={styled.best_seller_badge}>
                                        <FontAwesomeIcon icon={faFire} />
                                    </div>
                                    <div className={styled.offer_img}>
                                        <img
                                            src={offer.image_url || "https://via.placeholder.com/150"}
                                            alt={offer.name || "Offer Image"}
                                            loading="lazy"
                                        />
                                    </div>
                                    <div className={`${styled.offer_title}`}>
                                        <h5 className="offer_name">
                                            {offer.name?.length > 15
                                                ? `${offer.name.slice(0, 15)}...`
                                                : offer.name || "No title available"}
                                        </h5>
                                        <div className={`${styled.offer_description}`}>
                                            <p>
                                                {offer.description1?.length > 20
                                                    ? `${offer.description1.slice(0, 20)}...`
                                                    : offer.description1 || "No description available"}
                                            </p>
                                        </div>
                                        <div className={`${styled.offer_payout}`}>
                                            <FontAwesomeIcon className="gold" icon={faCoins}/>
                                            {(offer.payout * 1000).toLocaleString() || "0"}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </Slider>
                    ) : (
                        <div className="text-center w-100 loading-spinner offer-not-found">
                            <NotFoundAnimation />
                            <h4 className="fw-bold rounded">No top converting offers available</h4>
                        </div>
                    )}
                </div>
            </div>

            {isModalOpen && (
                <OfferModal
                    isModalOpen={isModalOpen}
                    selectedOffer={selectedOffer}
                    closeModal={closeModal}
                />
            )}
        </div>
    );
});

export default TopConvertingOffer;